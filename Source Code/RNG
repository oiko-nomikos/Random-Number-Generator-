MIT License

Copyright (c) 2025 oiko-nomikos

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.



#include <iostream>
#include <vector>
#include <deque>
#include <chrono>

class RandomNumberGenerator {
public:
    void run() {
        for (int i = 0; i < totalIterations; ++i) {
            long long duration = countdown();

            // Update global average using running mean
            ++count;
            globalSum += duration;
            globalAvg = globalSum / count;

            // Generate bit
            int bit = duration < globalAvg ? 0 : 1;

            // Push into local bits, maintaining a size of 512
            if (localBits.size() >= localBufferSize) {
                localBits.pop_front();  // remove oldest
            }
            localBits.push_back(bit);

            // Optional: Output progress
            std::cout << "Iteration " << i
                      << " | Duration: " << duration << " ns"
                      << " | Global Avg: " << globalAvg << " ns"
                      << " | Bit: " << bit << '\n';
        }

        // Final output of the 512-bit buffer
        std::cout << "\nLast 512 bits:\n";
        for (int bit : localBits) {
            std::cout << bit;
        }
        std::cout << std::endl;
    }

private:
    std::deque<int> localBits;  // store last 512 bits
    const int totalIterations = 10000;
    const size_t localBufferSize = 512;
    long long globalSum = 0;
    long long globalAvg = 0;
    int count = 0;

    long long countdown() {
        auto start = getTime();

        // Dummy workload
        int x = 10;
        while (x > 0) x--;

        auto end = getTime();
        return end - start;
    }

    long long getTime() {
        auto now = std::chrono::high_resolution_clock::now();
        return std::chrono::duration_cast<std::chrono::nanoseconds>(now.time_since_epoch()).count();
    }
};

int main() {
    RandomNumberGenerator rng;
    rng.run();
    return 0;
